apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: workflowtrigger
    app.kubernetes.io/name: workflowtrigger
    app.kubernetes.io/part-of: atlas
  name: workflowtrigger
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: reposerver
    app.kubernetes.io/name: reposerver
    app.kubernetes.io/part-of: atlas
  name: reposerver
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: workfloworchestrator
    app.kubernetes.io/name: workfloworchestrator
    app.kubernetes.io/part-of: atlas
  name: workfloworchestrator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: commanddelegator
    app.kubernetes.io/name: commanddelegator
    app.kubernetes.io/part-of: atlas
  name: commanddelegator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: clientwrapper
    app.kubernetes.io/name: clientwrapper
    app.kubernetes.io/part-of: atlas
  name: clientwrapper
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: atlas
rules:
  # Small scope, feel free to change it
  - apiGroups: ["*"]
    resources: ["*"] #"pods", "nodes"
    verbs: ["*"] #"get", "watch", "list"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prom-rbac
subjects:
  - kind: ServiceAccount
    name: workflowtrigger
    namespace: atlas
  - kind: ServiceAccount
    name: reposerver
    namespace: atlas
  - kind: ServiceAccount
    name: workfloworchestrator
    namespace: atlas
  - kind: ServiceAccount
    name: commanddelegator
    namespace: atlas
  - kind: ServiceAccount
    name: clientwrapper
    namespace: atlas
roleRef:
  kind: ClusterRole
  name: atlas
  apiGroup: rbac.authorization.k8s.io
---
#Redis Service & Deployment
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: redisserver
    app.kubernetes.io/part-of: atlas
  name: redisserver
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    app.kubernetes.io/name: redisserver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: redisserver
    app.kubernetes.io/part-of: atlas
  name: redisserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redisserver
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redisserver
    spec:
      containers:
        - image: redis
          name: redisserver
          ports:
            - containerPort: 6379
          resources: {}
      restartPolicy: Always
---
#WorkflowTrigger Service & Deployment
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: workflowtrigger
    app.kubernetes.io/part-of: atlas
  name: workflowtrigger
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: workflowtrigger
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: workflowtrigger
    app.kubernetes.io/part-of: atlas
  name: workflowtrigger
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: workflowtrigger
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: workflowtrigger
    spec:
      containers:
        - env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: atlas-kafka-bootstrap.kafka.svc.cluster.local:9092
            - name: REDIS_ENDPOINT
              value: redisserver.atlas.svc.cluster.local:6379
            - name: REPO_SERVER_ENDPOINT
              value: http://reposerver.atlas.svc.cluster.local:8081
          image: docker.io/greenopsinc/workflowtrigger:v0.10.0-b
          name: workflowtrigger
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
      serviceAccountName: workflowtrigger
---
#PipelineRepoServer Service & Deployment
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: reposerver
    app.kubernetes.io/part-of: atlas
  name: reposerver
spec:
  ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
  selector:
    app.kubernetes.io/name: reposerver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: reposerver
    app.kubernetes.io/part-of: atlas
  name: reposerver
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reposerver
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reposerver
    spec:
      containers:
        - env:
            - name: REDIS_ENDPOINT
              value: redisserver.atlas.svc.cluster.local:6379
            - name: ORG_NAME
              value: org
          image: docker.io/greenopsinc/reposerver:v0.10.0-b
          name: reposerver
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          resources: {}
      restartPolicy: Always
      serviceAccountName: reposerver
---
#WorkflowOrchestrator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: workfloworchestrator
    app.kubernetes.io/part-of: atlas
  name: workfloworchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: workfloworchestrator
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: workfloworchestrator
    spec:
      containers:
        - env:
            - name: CLIENT_WRAPPER_ENDPOINT
              value: http://atlasclientwrapper.atlas.svc.cluster.local:9091
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: atlas-kafka-bootstrap.kafka.svc.cluster.local:9092
            - name: REDIS_ENDPOINT
              value: redisserver.atlas.svc.cluster.local:6379
            - name: REPO_SERVER_ENDPOINT
              value: http://reposerver.atlas.svc.cluster.local:8081
          image: docker.io/greenopsinc/workfloworchestrator:v0.10.0-b
          name: workfloworchestrator
          imagePullPolicy: Always
          resources: {}
      restartPolicy: Always
      serviceAccountName: workfloworchestrator
---
#CommandDelegator Service & Deployment
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: commanddelegator
    app.kubernetes.io/part-of: atlas
  name: commanddelegator
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: commanddelegator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: commanddelegator
    app.kubernetes.io/part-of: atlas
  name: commanddelegator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: commanddelegator
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: commanddelegator
    spec:
      containers:
        - env:
            - name: REDIS_ENDPOINT
              value: redisserver.atlas.svc.cluster.local:6379
          image: docker.io/greenopsinc/commanddelegator:v0.10.0-b
          name: commanddelegator
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
      serviceAccountName: commanddelegator
---
#ClientWrapper Service & Deployment
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: clientwrapper
    app.kubernetes.io/part-of: atlas
  name: clientwrapper
spec:
  ports:
    - port: 9091
      targetPort: 9091
  selector:
    app.kubernetes.io/name: clientwrapper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: clientwrapper
    app.kubernetes.io/part-of: atlas
  name: clientwrapper
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: clientwrapper
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clientwrapper
    spec:
      containers:
        - name: clientwrapper
          image: docker.io/greenopsinc/clientwrapper:v0.10.0-b
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 8080
      restartPolicy: Always
      serviceAccountName: clientwrapper
