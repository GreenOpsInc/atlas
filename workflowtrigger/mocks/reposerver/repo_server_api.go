// Code generated by MockGen. DO NOT EDIT.
// Source: greenops.io/workflowtrigger/api/reposerver (interfaces: RepoManagerApi)

// Package mock_reposerver is a generated GoMock package.
package reposerver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/greenopsinc/util/git"
)

// MockRepoManagerApi is a mock of RepoManagerApi interface.
type MockRepoManagerApi struct {
	ctrl     *gomock.Controller
	recorder *MockRepoManagerApiMockRecorder
}

// MockRepoManagerApiMockRecorder is the mock recorder for MockRepoManagerApi.
type MockRepoManagerApiMockRecorder struct {
	mock *MockRepoManagerApi
}

// NewMockRepoManagerApi creates a new mock instance.
func NewMockRepoManagerApi(ctrl *gomock.Controller) *MockRepoManagerApi {
	mock := &MockRepoManagerApi{ctrl: ctrl}
	mock.recorder = &MockRepoManagerApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoManagerApi) EXPECT() *MockRepoManagerApiMockRecorder {
	return m.recorder
}

// CloneRepo mocks base method.
func (m *MockRepoManagerApi) CloneRepo(arg0 string, arg1 git.GitRepoSchema) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepo", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CloneRepo indicates an expected call of CloneRepo.
func (mr *MockRepoManagerApiMockRecorder) CloneRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepo", reflect.TypeOf((*MockRepoManagerApi)(nil).CloneRepo), arg0, arg1)
}

// DeleteRepo mocks base method.
func (m *MockRepoManagerApi) DeleteRepo(arg0 git.GitRepoSchema) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockRepoManagerApiMockRecorder) DeleteRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockRepoManagerApi)(nil).DeleteRepo), arg0)
}

// GetFileFromRepo mocks base method.
func (m *MockRepoManagerApi) GetFileFromRepo(arg0 git.GetFileRequest, arg1, arg2 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFileFromRepo indicates an expected call of GetFileFromRepo.
func (mr *MockRepoManagerApiMockRecorder) GetFileFromRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromRepo", reflect.TypeOf((*MockRepoManagerApi)(nil).GetFileFromRepo), arg0, arg1, arg2)
}

// SyncRepo mocks base method.
func (m *MockRepoManagerApi) SyncRepo(arg0 git.GitRepoSchema) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRepo", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// SyncRepo indicates an expected call of SyncRepo.
func (mr *MockRepoManagerApiMockRecorder) SyncRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRepo", reflect.TypeOf((*MockRepoManagerApi)(nil).SyncRepo), arg0)
}

// UpdateRepo mocks base method.
func (m *MockRepoManagerApi) UpdateRepo(arg0 string, arg1, arg2 git.GitRepoSchema) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockRepoManagerApiMockRecorder) UpdateRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockRepoManagerApi)(nil).UpdateRepo), arg0, arg1, arg2)
}
