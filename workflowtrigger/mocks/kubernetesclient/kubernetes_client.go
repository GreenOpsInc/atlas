// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/greenopsinc/util/kubernetesclient (interfaces: KubernetesClient)

// Package mock_kubernetesclient is a generated GoMock package.
package kubernetesclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/greenopsinc/util/git"
	kubernetesclient "github.com/greenopsinc/util/kubernetesclient"
	v1 "k8s.io/api/core/v1"
)

// MockKubernetesClient is a mock of KubernetesClient interface.
type MockKubernetesClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClientMockRecorder
}

// MockKubernetesClientMockRecorder is the mock recorder for MockKubernetesClient.
type MockKubernetesClientMockRecorder struct {
	mock *MockKubernetesClient
}

// NewMockKubernetesClient creates a new mock instance.
func NewMockKubernetesClient(ctrl *gomock.Controller) *MockKubernetesClient {
	mock := &MockKubernetesClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClient) EXPECT() *MockKubernetesClientMockRecorder {
	return m.recorder
}

// FetchGitCred mocks base method.
func (m *MockKubernetesClient) FetchGitCred(arg0 string) git.GitCred {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGitCred", arg0)
	ret0, _ := ret[0].(git.GitCred)
	return ret0
}

// FetchGitCred indicates an expected call of FetchGitCred.
func (mr *MockKubernetesClientMockRecorder) FetchGitCred(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGitCred", reflect.TypeOf((*MockKubernetesClient)(nil).FetchGitCred), arg0)
}

// FetchSecretData mocks base method.
func (m *MockKubernetesClient) FetchSecretData(arg0, arg1 string) *v1.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSecretData", arg0, arg1)
	ret0, _ := ret[0].(*v1.Secret)
	return ret0
}

// FetchSecretData indicates an expected call of FetchSecretData.
func (mr *MockKubernetesClientMockRecorder) FetchSecretData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSecretData", reflect.TypeOf((*MockKubernetesClient)(nil).FetchSecretData), arg0, arg1)
}

// StoreGitCred mocks base method.
func (m *MockKubernetesClient) StoreGitCred(arg0 git.GitCred, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGitCred", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoreGitCred indicates an expected call of StoreGitCred.
func (mr *MockKubernetesClientMockRecorder) StoreGitCred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGitCred", reflect.TypeOf((*MockKubernetesClient)(nil).StoreGitCred), arg0, arg1)
}

// WatchSecretData mocks base method.
func (m *MockKubernetesClient) WatchSecretData(arg0 context.Context, arg1, arg2 string, arg3 kubernetesclient.WatchSecretHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSecretData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchSecretData indicates an expected call of WatchSecretData.
func (mr *MockKubernetesClientMockRecorder) WatchSecretData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretData", reflect.TypeOf((*MockKubernetesClient)(nil).WatchSecretData), arg0, arg1, arg2, arg3)
}
