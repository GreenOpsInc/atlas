// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/greenopsinc/util/db (interfaces: DbOperator,DbClient)

// Package mock_db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auditlog "github.com/greenopsinc/util/auditlog"
	clientrequest "github.com/greenopsinc/util/clientrequest"
	cluster "github.com/greenopsinc/util/cluster"
	db "github.com/greenopsinc/util/db"
	team "github.com/greenopsinc/util/team"
)

// MockDbOperator is a mock of DbOperator interface.
type MockDbOperator struct {
	ctrl     *gomock.Controller
	recorder *MockDbOperatorMockRecorder
}

// MockDbOperatorMockRecorder is the mock recorder for MockDbOperator.
type MockDbOperatorMockRecorder struct {
	mock *MockDbOperator
}

// NewMockDbOperator creates a new mock instance.
func NewMockDbOperator(ctrl *gomock.Controller) *MockDbOperator {
	mock := &MockDbOperator{ctrl: ctrl}
	mock.recorder = &MockDbOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbOperator) EXPECT() *MockDbOperatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDbOperator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDbOperatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbOperator)(nil).Close))
}

// GetClient mocks base method.
func (m *MockDbOperator) GetClient() db.DbClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(db.DbClient)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockDbOperatorMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockDbOperator)(nil).GetClient))
}

// MockDbClient is a mock of DbClient interface.
type MockDbClient struct {
	ctrl     *gomock.Controller
	recorder *MockDbClientMockRecorder
}

// MockDbClientMockRecorder is the mock recorder for MockDbClient.
type MockDbClientMockRecorder struct {
	mock *MockDbClient
}

// NewMockDbClient creates a new mock instance.
func NewMockDbClient(ctrl *gomock.Controller) *MockDbClient {
	mock := &MockDbClient{ctrl: ctrl}
	mock.recorder = &MockDbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbClient) EXPECT() *MockDbClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDbClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDbClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbClient)(nil).Close))
}

// DeleteByPrefix mocks base method.
func (m *MockDbClient) DeleteByPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteByPrefix", arg0)
}

// DeleteByPrefix indicates an expected call of DeleteByPrefix.
func (mr *MockDbClientMockRecorder) DeleteByPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPrefix", reflect.TypeOf((*MockDbClient)(nil).DeleteByPrefix), arg0)
}

// FetchClusterSchema mocks base method.
func (m *MockDbClient) FetchClusterSchema(arg0 string) cluster.ClusterSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClusterSchema", arg0)
	ret0, _ := ret[0].(cluster.ClusterSchema)
	return ret0
}

// FetchClusterSchema indicates an expected call of FetchClusterSchema.
func (mr *MockDbClientMockRecorder) FetchClusterSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClusterSchema", reflect.TypeOf((*MockDbClient)(nil).FetchClusterSchema), arg0)
}

// FetchClusterSchemaTransactionless mocks base method.
func (m *MockDbClient) FetchClusterSchemaTransactionless(arg0 string) cluster.ClusterSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClusterSchemaTransactionless", arg0)
	ret0, _ := ret[0].(cluster.ClusterSchema)
	return ret0
}

// FetchClusterSchemaTransactionless indicates an expected call of FetchClusterSchemaTransactionless.
func (mr *MockDbClientMockRecorder) FetchClusterSchemaTransactionless(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClusterSchemaTransactionless", reflect.TypeOf((*MockDbClient)(nil).FetchClusterSchemaTransactionless), arg0)
}

// FetchHeadInClientRequestList mocks base method.
func (m *MockDbClient) FetchHeadInClientRequestList(arg0 string) clientrequest.ClientRequestPacket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHeadInClientRequestList", arg0)
	ret0, _ := ret[0].(clientrequest.ClientRequestPacket)
	return ret0
}

// FetchHeadInClientRequestList indicates an expected call of FetchHeadInClientRequestList.
func (mr *MockDbClientMockRecorder) FetchHeadInClientRequestList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHeadInClientRequestList", reflect.TypeOf((*MockDbClient)(nil).FetchHeadInClientRequestList), arg0)
}

// FetchLatestLog mocks base method.
func (m *MockDbClient) FetchLatestLog(arg0 string) auditlog.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestLog", arg0)
	ret0, _ := ret[0].(auditlog.Log)
	return ret0
}

// FetchLatestLog indicates an expected call of FetchLatestLog.
func (mr *MockDbClientMockRecorder) FetchLatestLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestLog", reflect.TypeOf((*MockDbClient)(nil).FetchLatestLog), arg0)
}

// FetchLatestPipelineInfo mocks base method.
func (m *MockDbClient) FetchLatestPipelineInfo(arg0 string) auditlog.PipelineInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestPipelineInfo", arg0)
	ret0, _ := ret[0].(auditlog.PipelineInfo)
	return ret0
}

// FetchLatestPipelineInfo indicates an expected call of FetchLatestPipelineInfo.
func (mr *MockDbClientMockRecorder) FetchLatestPipelineInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestPipelineInfo", reflect.TypeOf((*MockDbClient)(nil).FetchLatestPipelineInfo), arg0)
}

// FetchLogList mocks base method.
func (m *MockDbClient) FetchLogList(arg0 string, arg1 int) []auditlog.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLogList", arg0, arg1)
	ret0, _ := ret[0].([]auditlog.Log)
	return ret0
}

// FetchLogList indicates an expected call of FetchLogList.
func (mr *MockDbClientMockRecorder) FetchLogList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLogList", reflect.TypeOf((*MockDbClient)(nil).FetchLogList), arg0, arg1)
}

// FetchNotification mocks base method.
func (m *MockDbClient) FetchNotification(arg0 string) clientrequest.Notification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNotification", arg0)
	ret0, _ := ret[0].(clientrequest.Notification)
	return ret0
}

// FetchNotification indicates an expected call of FetchNotification.
func (mr *MockDbClientMockRecorder) FetchNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotification", reflect.TypeOf((*MockDbClient)(nil).FetchNotification), arg0)
}

// FetchPipelineInfoList mocks base method.
func (m *MockDbClient) FetchPipelineInfoList(arg0 string, arg1 int) []auditlog.PipelineInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPipelineInfoList", arg0, arg1)
	ret0, _ := ret[0].([]auditlog.PipelineInfo)
	return ret0
}

// FetchPipelineInfoList indicates an expected call of FetchPipelineInfoList.
func (mr *MockDbClientMockRecorder) FetchPipelineInfoList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPipelineInfoList", reflect.TypeOf((*MockDbClient)(nil).FetchPipelineInfoList), arg0, arg1)
}

// FetchStringList mocks base method.
func (m *MockDbClient) FetchStringList(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStringList", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// FetchStringList indicates an expected call of FetchStringList.
func (mr *MockDbClientMockRecorder) FetchStringList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStringList", reflect.TypeOf((*MockDbClient)(nil).FetchStringList), arg0)
}

// FetchTeamSchema mocks base method.
func (m *MockDbClient) FetchTeamSchema(arg0 string) team.TeamSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTeamSchema", arg0)
	ret0, _ := ret[0].(team.TeamSchema)
	return ret0
}

// FetchTeamSchema indicates an expected call of FetchTeamSchema.
func (mr *MockDbClientMockRecorder) FetchTeamSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTeamSchema", reflect.TypeOf((*MockDbClient)(nil).FetchTeamSchema), arg0)
}

// InsertValueInList mocks base method.
func (m *MockDbClient) InsertValueInList(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertValueInList", arg0, arg1)
}

// InsertValueInList indicates an expected call of InsertValueInList.
func (mr *MockDbClientMockRecorder) InsertValueInList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertValueInList", reflect.TypeOf((*MockDbClient)(nil).InsertValueInList), arg0, arg1)
}

// InsertValueInTransactionlessList mocks base method.
func (m *MockDbClient) InsertValueInTransactionlessList(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertValueInTransactionlessList", arg0, arg1)
}

// InsertValueInTransactionlessList indicates an expected call of InsertValueInTransactionlessList.
func (mr *MockDbClientMockRecorder) InsertValueInTransactionlessList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertValueInTransactionlessList", reflect.TypeOf((*MockDbClient)(nil).InsertValueInTransactionlessList), arg0, arg1)
}

// StoreValue mocks base method.
func (m *MockDbClient) StoreValue(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreValue", arg0, arg1)
}

// StoreValue indicates an expected call of StoreValue.
func (mr *MockDbClientMockRecorder) StoreValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreValue", reflect.TypeOf((*MockDbClient)(nil).StoreValue), arg0, arg1)
}

// UpdateHeadInList mocks base method.
func (m *MockDbClient) UpdateHeadInList(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHeadInList", arg0, arg1)
}

// UpdateHeadInList indicates an expected call of UpdateHeadInList.
func (mr *MockDbClientMockRecorder) UpdateHeadInList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeadInList", reflect.TypeOf((*MockDbClient)(nil).UpdateHeadInList), arg0, arg1)
}

// UpdateHeadInTransactionlessList mocks base method.
func (m *MockDbClient) UpdateHeadInTransactionlessList(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHeadInTransactionlessList", arg0, arg1)
}

// UpdateHeadInTransactionlessList indicates an expected call of UpdateHeadInTransactionlessList.
func (mr *MockDbClientMockRecorder) UpdateHeadInTransactionlessList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeadInTransactionlessList", reflect.TypeOf((*MockDbClient)(nil).UpdateHeadInTransactionlessList), arg0, arg1)
}
